{
"sessions": [{}
,{"start_time": "2024-07-20T20:49:22.450486-07:00", "end_time": "2024-07-20T22:31:17.609176-07:00", "start_message": "Begin session.", "end_message": "End session.\nMaking steady progress.", "messages": [{"time": "2024-07-20T20:49:22.450486-07:00", "msg": "Begin session."}, {"time": "2024-07-20T22:24:51.765048-07:00", "msg": "Right now, two `Symbol`s are equal if they are of the same class, same name and creation arguments."}, {"time": "2024-07-20T22:26:52.685375-07:00", "msg": "`main.py` ran without errors. Great success!"}, {"time": "2024-07-20T22:31:17.609176-07:00", "msg": "End session.\nMaking steady progress."}]}
,{"start_time": "2024-08-13T17:31:21.629176-07:00", "end_time": "2024-08-13T19:26:49.782819-07:00", "start_message": "Begin session.", "end_message": "End session.\nProved a simple theorem: real number 0 is unique", "messages": [{"time": "2024-08-13T17:31:21.629176-07:00", "msg": "Begin session."}, {"time": "2024-08-13T19:26:49.782819-07:00", "msg": "End session.\nProved a simple theorem: real number 0 is unique"}]}
,{"start_time": "2024-08-16T16:45:13.888728-07:00", "end_time": "2024-08-17T00:11:20.118816-07:00", "start_message": "Begin session.", "end_message": "End session.\nI've added a number of infix operators, fixed a few issues, added unification to `Expr` class. Pylance has a bug that does not allow assigning a generic function to a generic parameter in a class and being able to call that function normally, as I wanted to use with my @Infix decorator. Wrote the proof that 0 is unique using the infix proof style and I kinda like it.", "messages": [{"time": "2024-08-16T16:45:13.888728-07:00", "msg": "Begin session."}, {"time": "2024-08-16T16:57:29.571035-07:00", "msg": "I've started working on infix operator syntax such as `x |is_a| real_number`"}, {"time": "2024-08-17T00:11:20.118816-07:00", "msg": "End session.\nI've added a number of infix operators, fixed a few issues, added unification to `Expr` class. Pylance has a bug that does not allow assigning a generic function to a generic parameter in a class and being able to call that function normally, as I wanted to use with my @Infix decorator. Wrote the proof that 0 is unique using the infix proof style and I kinda like it."}]}
,{"start_time": "2024-08-17T09:58:29.665015-07:00", "end_time": "2024-08-17T15:30:32.531396-07:00", "start_message": "Begin session.", "end_message": "End session.\nTaking a break. Working on Groups; need to check that the group operation is associative. I'm thinking I might need to remove the Set class and just have Symbol; it would have attributes accessible depending on if 'is_set' is True.", "messages": [{"time": "2024-08-17T09:58:29.665015-07:00", "msg": "Begin session."}, {"time": "2024-08-17T15:30:32.531396-07:00", "msg": "End session.\nTaking a break. Working on Groups; need to check that the group operation is associative. I'm thinking I might need to remove the Set class and just have Symbol; it would have attributes accessible depending on if 'is_set' is True."}]}
,{"start_time": "2024-08-18T09:08:51.042660-07:00", "end_time": "2024-08-18T09:53:27.702205-07:00", "start_message": "Begin session.", "end_message": "End session.\nImplemented magma; need to start thinking about testing", "messages": [{"time": "2024-08-18T09:08:51.042660-07:00", "msg": "Begin session."}, {"time": "2024-08-18T09:53:27.702205-07:00", "msg": "End session.\nImplemented magma; need to start thinking about testing"}]}
,{"start_time": "2024-08-18T11:43:47.351390-07:00", "end_time": "2024-08-18T15:45:41.520273-07:00", "start_message": "Begin session.", "end_message": "End session.\nImplemented monoid and quasigroup.", "messages": [{"time": "2024-08-18T11:43:47.351390-07:00", "msg": "Begin session."}, {"time": "2024-08-18T15:45:41.520273-07:00", "msg": "End session.\nImplemented monoid and quasigroup."}]}
,{"start_time": "2024-08-18T16:08:18.321126-07:00", "end_time": "2024-08-19T01:14:21.758157-07:00", "start_message": "Begin session.", "end_message": "End session.\nfixed bugs, added util functions, proved that group elements have unique inverses ", "messages": [{"time": "2024-08-18T16:08:18.321126-07:00", "msg": "Begin session."}, {"time": "2024-08-18T17:39:11.704253-07:00", "msg": "Done with `AbelianGroup`. Will skip Semilattic for now."}, {"time": "2024-08-19T01:13:37.806188-07:00", "msg": "I just finished proving that group elements have unique inverses from their axioms."}, {"time": "2024-08-19T01:14:21.758157-07:00", "msg": "End session.\nfixed bugs, added util functions, proved that group elements have unique inverses "}]}
,{"start_time": "2024-08-25T12:56:06.647839-07:00", "end_time": "2024-08-25T17:36:35.640553-07:00", "start_message": "Begin session.", "end_message": "End session.\nbreak session", "messages": [{"time": "2024-08-25T12:56:06.647839-07:00", "msg": "Begin session."}, {"time": "2024-08-25T17:36:11.240974-07:00", "msg": "Started implementing ring-like structures. Need to implement `CrookedSemirIng`, `SemirIng`, `Rng` and `RIng`."}, {"time": "2024-08-25T17:36:35.640553-07:00", "msg": "End session.\nbreak session"}]}
,{"start_time": "2024-08-25T21:38:58.883671-07:00", "end_time": "2024-08-25T21:40:08.915607-07:00", "start_message": "Begin session.", "end_message": "End session.\nimplemented ring-like all the way to `Ring`.", "messages": [{"time": "2024-08-25T21:38:58.883671-07:00", "msg": "Begin session."}, {"time": "2024-08-25T21:39:45.093519-07:00", "msg": "had another >2 hr session, just ended. Had an error in session.py. I implemented ring-like all the way to `Ring`."}, {"time": "2024-08-25T21:40:08.915607-07:00", "msg": "End session.\nimplemented ring-like all the way to `Ring`."}]}
,{"start_time": "2024-08-26T17:31:31.582383-07:00", "end_time": "2024-08-26T21:47:20.519194-07:00", "start_message": "Begin session.", "end_message": "End session.\nEnd session. Implemented and tested (a bit) Field.", "messages": [{"time": "2024-08-26T17:31:31.582383-07:00", "msg": "Begin session."}, {"time": "2024-08-26T19:30:23.618517-07:00", "msg": "implemented `Field`."}, {"time": "2024-08-26T21:46:40.949419-07:00", "msg": "I've done some basic tests with a `Field` instance.\nI need to make it so that if an Expr or object is the result of a operation\nused in defining the structure, the set automatically contains it.\n\nFor eg, right now, using `plus_operation=lambda x,y: Add(x,y)` results in not being able\nto tell if `Add(x,y)` is an element of the set, but it should be.\n\nOn a related note, need to create `_is_real` and `_is_natural` etc attributes\non `Symbol`s and `Expr`s, and then `is_real = _is_real or is_rational`\n`is_rational = _is_rational or is_natural`, `is_natural = _is_natural`.\nThese can be `True`, `False` or `None`.\n\nFinally, add functionality to convert `Sympy` -> `Pylogic`."}, {"time": "2024-08-26T21:47:20.519194-07:00", "msg": "End session.\nEnd session. Implemented and tested (a bit) Field."}]}
]}